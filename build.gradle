/*
 * Copyright (c) 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"
  }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

apply from: 'publish-maven.gradle'

group 'com.github.starvn'
description = 'Dependency Management Plugin'

ext {
  cglibVersion = '3.3.0'
  jarjarVersion = '1.2.1'
  mavenVersion = '3.6.0'
  spockVersion = GroovySystem.version.startsWith('1.') ? '0.7-groovy-1.8' : '0.7-groovy-2.0'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
  mavenCentral()
  maven { url 'https://repo.gradle.org/gradle/libs-releases' }
  maven { url 'https://starvn.jfrog.io/artifactory/plugins-release' }
}

checkstyle {
  configFile = rootProject.file('config/checkstyle/checkstyle.xml')
  configProperties = ['checkstyle.config.dir': rootProject.file('config/checkstyle')]
  toolVersion = '8.40'
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled true
    html.enabled true
  }
}

sonarqube {
  properties {
    property "sonar.projectKey", "starvn_gradle-dmt-plugin"
    property "sonar.organization", "starvn"
    property "sonar.host.url", "https://sonarcloud.io"
    property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
    property 'sonar.java.coveragePlugin', 'jacoco'
    property 'sonar.links.homepage', 'https://github.com/starvn/gradle-dmt-plugin'
    property 'sonar.links.issue', 'https://github.com/starvn/gradle-dmt-plugin/issues'
    property 'sonar.links.scm', 'https://github.com/starvn/gradle-dmt-plugin'
  }
}

configurations {
  jarjar
  maven
}

task mavenRepackJar(type: Jar) { repackJar ->
  repackJar.baseName = "maven-repack"
  repackJar.version = mavenVersion

  doLast() {
    project.ant {
      taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask",
        classpath: configurations.jarjar.asPath
      jarjar(destfile: repackJar.archivePath) {
        configurations.maven.each { originalJar ->
          zipfileset(src: originalJar)
        }
        rule(pattern: 'org.**', result: 'com.github.starvn.dmt.org.@1')
      }
    }
  }
}

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile(files(mavenRepackJar))
  jarjar "org.gradle.jarjar:jarjar:$jarjarVersion"
  maven "org.apache.maven:maven-model-builder:$mavenVersion"
  compileOnly 'org.projectlombok:lombok:1.18.16'
  annotationProcessor 'org.projectlombok:lombok:1.18.16'
  testCompileOnly 'org.projectlombok:lombok:1.18.16'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
  testCompile("org.spockframework:spock-core:$spockVersion") {
    exclude group: 'org.codehaus.groovy'
  }
  testCompile "cglib:cglib-nodep:$cglibVersion"
  testCompile gradleTestKit()
}

jar {
  dependsOn mavenRepackJar
  from(zipTree(mavenRepackJar.archivePath)) {
    include 'com/github/starvn/**'
    include 'META-INF/plexus/**'
  }

  manifest {
    attributes(
      'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
      'Implementation-Title': project.description,
      'Implementation-Version': project.version,
      'Implementation-Vendor': 'StarVN Team'
    )
  }
}

javadoc {
  title = "$project.description $project.version API"
  exclude 'com/github/starvn/dma/internal/**'
  options {
    links "https://docs.gradle.org/${project.getGradle().getGradleVersion()}/javadoc/",
      'https://docs.oracle.com/en/java/javase/11/docs/api/'
  }
}

tasks.withType(Javadoc) {
  failOnError false
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier('sources')
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  classifier('javadoc')
  from javadoc
}

task docsZip(type: Zip, dependsOn: [':javadoc']) {
  group = 'Distribution'
  baseName('gradle-dmt-plugin')
  classifier('docs')
  description = "Builds -${classifier()} archive containing API and reference documentation"
  destinationDir(file("${project.buildDir}/distributions"))

  from(javadoc) {
    into 'api'
  }
}

jacoco {
  toolVersion = '0.8.6'
}

test {
  testLogging {
    quiet {
      events 'failed'
      exceptionFormat 'full'
    }
    exceptionFormat 'full'
  }
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives docsZip
}